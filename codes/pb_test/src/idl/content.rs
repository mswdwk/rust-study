// This file is generated by rust-protobuf 2.4.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContentInt {
    // message fields
    pub one: ::std::option::Option<bool>,
    pub two: ::std::option::Option<i64>,
    pub three: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContentInt {
    pub fn new() -> ContentInt {
        ::std::default::Default::default()
    }

    // optional bool one = 1;

    pub fn clear_one(&mut self) {
        self.one = ::std::option::Option::None;
    }

    pub fn has_one(&self) -> bool {
        self.one.is_some()
    }

    // Param is passed by value, moved
    pub fn set_one(&mut self, v: bool) {
        self.one = ::std::option::Option::Some(v);
    }

    pub fn get_one(&self) -> bool {
        self.one.unwrap_or(false)
    }

    // optional int64 two = 2;

    pub fn clear_two(&mut self) {
        self.two = ::std::option::Option::None;
    }

    pub fn has_two(&self) -> bool {
        self.two.is_some()
    }

    // Param is passed by value, moved
    pub fn set_two(&mut self, v: i64) {
        self.two = ::std::option::Option::Some(v);
    }

    pub fn get_two(&self) -> i64 {
        self.two.unwrap_or(0)
    }

    // optional string three = 3;

    pub fn clear_three(&mut self) {
        self.three.clear();
    }

    pub fn has_three(&self) -> bool {
        self.three.is_some()
    }

    // Param is passed by value, moved
    pub fn set_three(&mut self, v: ::std::string::String) {
        self.three = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_three(&mut self) -> &mut ::std::string::String {
        if self.three.is_none() {
            self.three.set_default();
        }
        self.three.as_mut().unwrap()
    }

    // Take field
    pub fn take_three(&mut self) -> ::std::string::String {
        self.three.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_three(&self) -> &str {
        match self.three.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for ContentInt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.one = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.two = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.three)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.one {
            my_size += 2;
        }
        if let Some(v) = self.two {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.three.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.one {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.two {
            os.write_int64(2, v)?;
        }
        if let Some(ref v) = self.three.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContentInt {
        ContentInt::new()
    }

    fn default_instance() -> &'static ContentInt {
        static mut instance: ::protobuf::lazy::Lazy<ContentInt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContentInt,
        };
        unsafe {
            instance.get(ContentInt::new)
        }
    }
}

impl ::protobuf::Clear for ContentInt {
    fn clear(&mut self) {
        self.clear_one();
        self.clear_two();
        self.clear_three();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentInt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContentStr {
    // message fields
    pub one: ::std::option::Option<bool>,
    pub two: ::protobuf::SingularField<::std::string::String>,
    pub three: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContentStr {
    pub fn new() -> ContentStr {
        ::std::default::Default::default()
    }

    // optional bool one = 1;

    pub fn clear_one(&mut self) {
        self.one = ::std::option::Option::None;
    }

    pub fn has_one(&self) -> bool {
        self.one.is_some()
    }

    // Param is passed by value, moved
    pub fn set_one(&mut self, v: bool) {
        self.one = ::std::option::Option::Some(v);
    }

    pub fn get_one(&self) -> bool {
        self.one.unwrap_or(false)
    }

    // optional string two = 2;

    pub fn clear_two(&mut self) {
        self.two.clear();
    }

    pub fn has_two(&self) -> bool {
        self.two.is_some()
    }

    // Param is passed by value, moved
    pub fn set_two(&mut self, v: ::std::string::String) {
        self.two = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_two(&mut self) -> &mut ::std::string::String {
        if self.two.is_none() {
            self.two.set_default();
        }
        self.two.as_mut().unwrap()
    }

    // Take field
    pub fn take_two(&mut self) -> ::std::string::String {
        self.two.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_two(&self) -> &str {
        match self.two.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string three = 3;

    pub fn clear_three(&mut self) {
        self.three.clear();
    }

    pub fn has_three(&self) -> bool {
        self.three.is_some()
    }

    // Param is passed by value, moved
    pub fn set_three(&mut self, v: ::std::string::String) {
        self.three = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_three(&mut self) -> &mut ::std::string::String {
        if self.three.is_none() {
            self.three.set_default();
        }
        self.three.as_mut().unwrap()
    }

    // Take field
    pub fn take_three(&mut self) -> ::std::string::String {
        self.three.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_three(&self) -> &str {
        match self.three.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for ContentStr {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.one = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.two)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.three)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.one {
            my_size += 2;
        }
        if let Some(ref v) = self.two.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.three.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.one {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.two.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.three.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContentStr {
        ContentStr::new()
    }

    fn default_instance() -> &'static ContentStr {
        static mut instance: ::protobuf::lazy::Lazy<ContentStr> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContentStr,
        };
        unsafe {
            instance.get(ContentStr::new)
        }
    }
}

impl ::protobuf::Clear for ContentStr {
    fn clear(&mut self) {
        self.clear_one();
        self.clear_two();
        self.clear_three();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentStr {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContentStr4 {
    // message fields
    pub one: ::std::option::Option<bool>,
    pub two: ::protobuf::SingularField<::std::string::String>,
    pub three: ::protobuf::SingularField<::std::string::String>,
    pub four: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ContentStr4 {
    pub fn new() -> ContentStr4 {
        ::std::default::Default::default()
    }

    // optional bool one = 1;

    pub fn clear_one(&mut self) {
        self.one = ::std::option::Option::None;
    }

    pub fn has_one(&self) -> bool {
        self.one.is_some()
    }

    // Param is passed by value, moved
    pub fn set_one(&mut self, v: bool) {
        self.one = ::std::option::Option::Some(v);
    }

    pub fn get_one(&self) -> bool {
        self.one.unwrap_or(false)
    }

    // optional string two = 2;

    pub fn clear_two(&mut self) {
        self.two.clear();
    }

    pub fn has_two(&self) -> bool {
        self.two.is_some()
    }

    // Param is passed by value, moved
    pub fn set_two(&mut self, v: ::std::string::String) {
        self.two = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_two(&mut self) -> &mut ::std::string::String {
        if self.two.is_none() {
            self.two.set_default();
        }
        self.two.as_mut().unwrap()
    }

    // Take field
    pub fn take_two(&mut self) -> ::std::string::String {
        self.two.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_two(&self) -> &str {
        match self.two.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string three = 3;

    pub fn clear_three(&mut self) {
        self.three.clear();
    }

    pub fn has_three(&self) -> bool {
        self.three.is_some()
    }

    // Param is passed by value, moved
    pub fn set_three(&mut self, v: ::std::string::String) {
        self.three = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_three(&mut self) -> &mut ::std::string::String {
        if self.three.is_none() {
            self.three.set_default();
        }
        self.three.as_mut().unwrap()
    }

    // Take field
    pub fn take_three(&mut self) -> ::std::string::String {
        self.three.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_three(&self) -> &str {
        match self.three.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string four = 4;

    pub fn clear_four(&mut self) {
        self.four.clear();
    }

    pub fn has_four(&self) -> bool {
        self.four.is_some()
    }

    // Param is passed by value, moved
    pub fn set_four(&mut self, v: ::std::string::String) {
        self.four = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_four(&mut self) -> &mut ::std::string::String {
        if self.four.is_none() {
            self.four.set_default();
        }
        self.four.as_mut().unwrap()
    }

    // Take field
    pub fn take_four(&mut self) -> ::std::string::String {
        self.four.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_four(&self) -> &str {
        match self.four.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for ContentStr4 {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.one = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.two)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.three)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.four)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.one {
            my_size += 2;
        }
        if let Some(ref v) = self.two.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.three.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.four.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.one {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.two.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.three.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.four.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContentStr4 {
        ContentStr4::new()
    }

    fn default_instance() -> &'static ContentStr4 {
        static mut instance: ::protobuf::lazy::Lazy<ContentStr4> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContentStr4,
        };
        unsafe {
            instance.get(ContentStr4::new)
        }
    }
}

impl ::protobuf::Clear for ContentStr4 {
    fn clear(&mut self) {
        self.clear_one();
        self.clear_two();
        self.clear_three();
        self.clear_four();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentStr4 {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
